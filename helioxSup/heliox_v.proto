# This is an alternative implementation of the protocol file for a mercury-heliox device.
# It uses the same command syntax as the labview driver, but because it asks for everything each time, is probably less efficient.
# It is probably also less resilient if an extra parameter gets added to the mercury as this would change the set of parameters received.
# We can try to use this protocol if  the short commands don't end up working against the hardware.


ReadTimeout = 1000;
WriteTimeout = 1000;
ReplyTimeout = 1000;


Terminator = LF;

# Read variables that come from the top-level "HelioxX" interface.

get_temp {
    out "READ:DEV:HelioxX:HEL";
    in "STAT:DEV:HelioxX:HEL"
	   ":LOWT:%*fK"
       ":BT:%*fK"
       ":NVCN:%*fmB"
       ":RCTD:%*fK"
       ":RCST:%*fK"
       ":NVHT:%*fmB"
       ":RCTE:%*fK"
       ":SRBH:%*fK"
       ":PE:%*fK"
       ":RGNA:%*fK"
       ":PCT:%*fK"
       ":SIG:H4PS:%*[^:]"
       ":STAT:%*[^:]"
       ":TEMP:%fK"
       ":TSET:%*fK"
       ":H3PS:%*[^:]"
       ":SRBS:%*[^:]"
       ":SRBR:%*fK"
       ":SCT:%*fK"
       ":NVLT:%*fmB";
}

set_temp {
    out "SET:DEV:HelioxX:HEL:SIG:TSET:%fK";
	in "STAT:DEV:HelioxX:HEL:SIG:TSET:%*fK";
}

get_temp_sp_rbv {
    out "READ:DEV:HelioxX:HEL";
    in "STAT:DEV:HelioxX:HEL"
	   ":LOWT:%*fK"
       ":BT:%*fK"
       ":NVCN:%*fmB"
       ":RCTD:%*fK"
       ":RCST:%*fK"
       ":NVHT:%*fmB"
       ":RCTE:%*fK"
       ":SRBH:%*fK"
       ":PE:%*fK"
       ":RGNA:%*fK"
       ":PCT:%*fK"
       ":SIG:H4PS:%*[^:]"
       ":STAT:%*[^:]"
       ":TEMP:%*fK"
       ":TSET:%fK"
       ":H3PS:%*[^:]"
       ":SRBS:%*[^:]"
       ":SRBR:%*fK"
       ":SCT:%*fK"
       ":NVLT:%*fmB";
}

get_stability {
    out "READ:DEV:HelioxX:HEL";
    in "STAT:DEV:HelioxX:HEL"
	   ":LOWT:%*fK"
       ":BT:%*fK"
       ":NVCN:%*fmB"
       ":RCTD:%*fK"
       ":RCST:%*fK"
       ":NVHT:%*fmB"
       ":RCTE:%*fK"
       ":SRBH:%*fK"
       ":PE:%*fK"
       ":RGNA:%*fK"
       ":PCT:%*fK"
       ":SIG:H4PS:%*[^:]"
       ":STAT:%*[^:]"
       ":TEMP:%*fK"
       ":TSET:%*fK"
       ":H3PS:%[^:]"
       ":SRBS:%*[^:]"
       ":SRBR:%*fK"
       ":SCT:%*fK"
       ":NVLT:%*fmB";
}

# Read channel temperatures.

get_chan_temp {
    out "READ:DEV:\$1:TEMP";
    in "STAT:DEV:\$1:TEMP"
       ":EXCT:TYPE:%*[^:]"
	   ":MAG:%*f"
       ":STAT:%*f"
       ":NICK:%*[^:]"
       ":LOOP:AUX:%*[^:]"
       ":D:%*f"
       ":HTR:%*[^:]"
       ":I:%*f"
       ":THTF:%*[^:]"
       ":HSET:%*f"
       ":PIDT:%*[^:]"
       ":ENAB:%*[^:]"
       ":SWFL:%*[^:]"
       ":FAUT:%*[^:]"
       ":FSET:%*f"
       ":PIDF:%*[^:]"
       ":P:%*f"
       ":SWMD:%*[^:]"
       ":TSET:%*fK"
       ":MAN:HVER:%*f"
       ":FVER:%*f"
       ":SERL:%*f"
       ":CAL:OFFS:%*f"
       ":COLDL:%*fK"
       ":INT:LIN:SCAL:%*f"
       ":FILE:%*[^:]"
       ":HOTL:%*fK"
       ":TYPE:%*[^:]"
       ":SIG:VOLT:%*fmV"
       ":CURR:%*fA"
       ":TEMP:%fK"
       ":POWR:%*fW"
       ":RES:%*fO"
       ":SLOP:%*fO/K";
}

# Read channel temperature setpoint readbacks.

get_chan_temp_sp {
    out "READ:DEV:\$1:TEMP";
    in "STAT:DEV:\$1:TEMP"
       ":EXCT:TYPE:%*[^:]"
	   ":MAG:%*f"
       ":STAT:%*f"
       ":NICK:%*[^:]"
       ":LOOP:AUX:%*[^:]"
       ":D:%*f"
       ":HTR:%*[^:]"
       ":I:%*f"
       ":THTF:%*[^:]"
       ":HSET:%*f"
       ":PIDT:%*[^:]"
       ":ENAB:%*[^:]"
       ":SWFL:%*[^:]"
       ":FAUT:%*[^:]"
       ":FSET:%*f"
       ":PIDF:%*[^:]"
       ":P:%*f"
       ":SWMD:%*[^:]"
       ":TSET:%fK"
       ":MAN:HVER:%*f"
       ":FVER:%*f"
       ":SERL:%*f"
       ":CAL:OFFS:%*f"
       ":COLDL:%*fK"
       ":INT:LIN:SCAL:%*f"
       ":FILE:%*[^:]"
       ":HOTL:%*fK"
       ":TYPE:%*[^:]"
       ":SIG:VOLT:%*fmV"
       ":CURR:%*fA"
       ":TEMP:%*fK"
       ":POWR:%*fW"
       ":RES:%*fO"
       ":SLOP:%*fO/K";
}

# Read channel heater statuses

get_chan_heater_auto {
    out "READ:DEV:\$1:TEMP";
    in "STAT:DEV:\$1:TEMP"
       ":EXCT:TYPE:%*[^:]"
	   ":MAG:%*f"
       ":STAT:%*f"
       ":NICK:%*[^:]"
       ":LOOP:AUX:%*[^:]"
       ":D:%*f"
       ":HTR:%*[^:]"
       ":I:%*f"
       ":THTF:%*[^:]"
       ":HSET:%*f"
       ":PIDT:%*[^:]"
       ":ENAB:%{OFF|ON}"
       ":SWFL:%*[^:]"
       ":FAUT:%*[^:]"
       ":FSET:%*f"
       ":PIDF:%*[^:]"
       ":P:%*f"
       ":SWMD:%*[^:]"
       ":TSET:%*fK"
       ":MAN:HVER:%*f"
       ":FVER:%*f"
       ":SERL:%*f"
       ":CAL:OFFS:%*f"
       ":COLDL:%*fK"
       ":INT:LIN:SCAL:%*f"
       ":FILE:%*[^:]"
       ":HOTL:%*fK"
       ":TYPE:%*[^:]"
       ":SIG:VOLT:%*fmV"
       ":CURR:%*fA"
       ":TEMP:%*fK"
       ":POWR:%*fW"
       ":RES:%*fO"
       ":SLOP:%*fO/K";
}

# Channel stabilities

get_stability_HE3SORB {
    out "READ:DEV:HelioxX:HEL";
	in "STAT:DEV:HelioxX:HEL"
	   ":LOWT:%*fK"
       ":BT:%*fK"
       ":NVCN:%*fmB"
       ":RCTD:%*fK"
       ":RCST:%*fK"
       ":NVHT:%*fmB"
       ":RCTE:%*fK"
       ":SRBH:%*fK"
       ":PE:%*fK"
       ":RGNA:%*fK"
       ":PCT:%*fK"
       ":SIG:H4PS:%*[^:]"
       ":STAT:%*[^:]"
       ":TEMP:%*fK"
       ":TSET:%*fK"
       ":H3PS:%*[^:]"
       ":SRBS:%[^:]"
       ":SRBR:%*fK"
       ":SCT:%*fK"
       ":NVLT:%*fmB";
}

get_stability_HE4POT {
    out "READ:DEV:HelioxX:HEL";
    in "STAT:DEV:HelioxX:HEL"
	   ":LOWT:%*fK"
       ":BT:%*fK"
       ":NVCN:%*fmB"
       ":RCTD:%*fK"
       ":RCST:%*fK"
       ":NVHT:%*fmB"
       ":RCTE:%*fK"
       ":SRBH:%*fK"
       ":PE:%*fK"
       ":RGNA:%*fK"
       ":PCT:%*fK"
       ":SIG:H4PS:%[^:]"
       ":STAT:%*[^:]"
       ":TEMP:%*fK"
       ":TSET:%*fK"
       ":H3PS:%*[^:]"
       ":SRBS:%*[^:]"
       ":SRBR:%*fK"
       ":SCT:%*fK"
       ":NVLT:%*fmB";
}
